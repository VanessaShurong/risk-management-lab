import pandas as pd
import numpy as np
from prettytable import PrettyTable
import importlib
importlib.reload(sys)

spx = pd.read_csv('SPX500.csv',index_col=0)
equity = pd.read_excel('Equitytest.xls', sheet_name = 'Equitytest',index_col=0)

spx_return = spx
equity_return = equity

spx_return = spx_return.iloc[:-1,0].values / spx_return.iloc[1:,0] - 1
#spx = pd.DataFrame((spx.iloc[:,1] - np.mean(spx.iloc[:,1]))/np.std(spx.iloc[:,1]))
#spx_return = spx_return.dropna()



for i in range(equity_return.shape[1]):
    equity_return.iloc[:,i] = equity_return.iloc[:-1,i].values / equity_return.iloc[1:,i] - 1
#    equity.iloc[:,i] = (equity.iloc[:,i] - np.mean(equity.iloc[:,i]))/np.std(equity.iloc[:,i])

equity_return = equity_return.dropna()   

n = 3

w = np.array([1/n for i in range(n)])

#equity_return=np.dot(equity_return,w)

def senirotest_gfc(df,w):
    """ 
    seniro test under global financial crisis case
    """
    eq_beta_i = pd.DataFrame(np.zeros((1, 3)))
# equity stress test  
    for i in range(equity_return.shape[1]):
        eq_beta_i_gfc.iloc[:,i] = np.cov(equity_return.iloc[:,i],spx_return)[0,1] / np.var(spx_return)
        gfc_e = w[i] * (eq_beta_i_gfc.iloc[:,i] * (-0.37) * equity.iloc[:,i]).sum()

# real estate stree test
    for i in range(realestate.shape[1]-1):
        re_wei_beta_i_gfc.iloc[:,i] = np.cov(realestate.iloc[:,i+1],spx.iloc[:,1])[0,1] / np.var(spx.iloc[:,1])
        gfc_r = w[i] * (realestate.iloc[:,i+1] * (-0.159) * re_wei_beta_i_gfc.iloc[:,i]).sum()


# private equity stree test
    for i in range(pe.shape[1]-1):
        pe_wei_beta_i_gfc.iloc[:,i] = w[i] * np.cov(pe.iloc[:,i+1],spx.iloc[:,1])[0,1] / np.var(spx.iloc[:,1])
        gfc_pe = w[i] * (realestate.iloc[:,i+1] * (-0.53) * pe_wei_beta_i_gfc.iloc[:,i]).sum()
    
# fixed income stree test
# 缺数据
    for i in range(fix.shape[1]-1):
        fix_wei_beta_i_gfc.iloc[:,i] = w[i] * np.cov(fix.iloc[:,i+1],spx.iloc[:,1])[0,1] / np.var(spx.iloc[:,1])
        gfc_fix = w[i] * (fix.iloc[:,i+1] * (-0.53) * fix_wei_beta_i_gfc.iloc[:,i]).sum()
        
return gfc_e, gfc_r, gfc_pe, gfc_fix

def senirotest_blackMonday(df,w):
    """
    seniro test under Black Monday case. In this case, it only affect equity. 
    So in that day, the equity drop 22.6%
    """
    for i in range(equity_return.shape[1]-1):
        eq_beta_i_blc.iloc[:,i] = np.cov(equity_return.iloc[:,i],spx_return)[0,1] / np.var(spx_return)
        black = w[i] * (equity.iloc[:,i] * (-0.226)).sum() * eq_beta_i_blc.iloc[:,i]

return balck

def senirotest_ir(df,w):
    """
    seniro test under 1194 when the interest rate suddenly increase by 1% for no reason.
    """
    # equity stress test  
    for i in range(equity_return.shape[1]):
        eq_beta_i_ir.iloc[:,i] = np.cov(equity_return.iloc[:,i],spx_return)[0,1] / n
        ir_e = w[i] * (eq_beta_i_ir.iloc[:,i] * (-0.37) * equity.iloc[:,i]).sum()

    # fixed income stree test
    # 缺数据
    for i in range(fix.shape[1]-1):
        fix_beta_i_ir = np.cov(fix.iloc[:,i+1],spx.iloc[:,1])[0,1] / np.var(spx.iloc[:,1])
        ir_fix = w[i] * (fix.iloc[:,i+1] * (-0.1) * fix_wei_beta_i_ir.iloc[:,i]).sum()
        
# real estate stree test
    for i in range(realestate.shape[1]-1):
        re_wei_beta_i_ir.iloc[:,i] = np.cov(realestate.iloc[:,i+1],spx.iloc[:,1])[0,1] / np.var(spx.iloc[:,1])
        ir_r = w[i] * (realestate.iloc[:,i+1] * (-0.159) * re_wei_beta_ir.iloc[:,i]).sum()


# private equity stree test
    for i in range(pe.shape[1]-1):
        pe_wei_beta_i_ir.iloc[:,i] = w[i] * np.cov(pe.iloc[:,i+1],spx.iloc[:,1])[0,1] / np.var(spx.iloc[:,1])
        ir_pe = w[i] * (realestate.iloc[:,i+1] * (-0.53) * pe_wei_beta_ir.iloc[:,i]).sum()

return ir_e, ir_fix, ir_r, ir_pe


"""
Print the table to show the all P&L change under different cases
"""
table = PrettyTable(['Category','Global Financial Crisis','1987 Black Monday','1994 Interest Rate Spike'])
table.add_row(['Equity',gfc_e, black,ir_e])
table.add_row(['Bond',gfc_fix,'Not Affect',ir_fix])
table.add_row(['Real Estate',gfc_r,'Not Affect',ir_r])
table.add_row(['Private Equity',gfc_pe,'Not Affect',ir_pe])
print(table)   

